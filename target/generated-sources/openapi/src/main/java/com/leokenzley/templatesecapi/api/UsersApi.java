/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.leokenzley.templatesecapi.api;

import com.leokenzley.templatesecapi.model.Error;
import com.leokenzley.templatesecapi.model.UserRequest;
import com.leokenzley.templatesecapi.model.UserResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-04-03T22:39:55.594698911-03:00[America/Sao_Paulo]")
@Validated
@Tag(name = "users", description = "Users controll APIs")
@RequestMapping("${openapi.controleDeUsurios.base-path:}")
public interface UsersApi {

    /**
     * POST /users : Add a new user.
     * Add a new user.
     *
     * @param userRequest Create a new user (required)
     * @return Successful operation (status code 200)
     */
    @Operation(
        operationId = "addUser",
        summary = "Add a new user.",
        description = "Add a new user.",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponse.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = UserResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users",
        produces = { "application/json", "application/xml" },
        consumes = { "application/json" }
    )
    ResponseEntity<UserResponse> addUser(
        @Parameter(name = "UserRequest", description = "Create a new user", required = true) @Valid @RequestBody UserRequest userRequest
    );


    /**
     * DELETE /users/{id} : Deletes an user.
     * Delete an user.
     *
     * @param id The id that needs to be fetched. Use user1 for testing (required)
     * @return User deleted (status code 200)
     *         or Invalid user value (status code 400)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "deleteUserById",
        summary = "Deletes an user.",
        description = "Delete an user.",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User deleted"),
            @ApiResponse(responseCode = "400", description = "Invalid user value"),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/users/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<Void> deleteUserById(
        @Parameter(name = "id", description = "The id that needs to be fetched. Use user1 for testing", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    );


    /**
     * GET /users : Get all users.
     * Get all users.
     *
     * @return successful operation (status code 200)
     */
    @Operation(
        operationId = "getAllUsers",
        summary = "Get all users.",
        description = "Get all users.",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UserResponse.class))),
                @Content(mediaType = "application/xml", array = @ArraySchema(schema = @Schema(implementation = UserResponse.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users",
        produces = { "application/json", "application/xml" }
    )
    ResponseEntity<List<UserResponse>> getAllUsers(
        
    );


    /**
     * GET /users/{id} : Get user by user id.
     * Get user detail based on id.
     *
     * @param id The id that needs to be fetched. Use user1 for testing (required)
     * @return successful operation (status code 200)
     *         or Invalid username supplied (status code 400)
     *         or User not found (status code 404)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getUserById",
        summary = "Get user by user id.",
        description = "Get user detail based on id.",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponse.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = UserResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid username supplied"),
            @ApiResponse(responseCode = "404", description = "User not found"),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{id}",
        produces = { "application/json", "application/xml" }
    )
    ResponseEntity<UserResponse> getUserById(
        @Parameter(name = "id", description = "The id that needs to be fetched. Use user1 for testing", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    );


    /**
     * PUT /users/{id} : Update an existing user.
     * Update an existing user by Id.
     *
     * @param id The id that needs to be fetched. Use user1 for testing (required)
     * @param userRequest Update an existent user in the store (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or User not found (status code 404)
     *         or Validation exception (status code 422)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "updateUser",
        summary = "Update an existing user.",
        description = "Update an existing user by Id.",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "User not found"),
            @ApiResponse(responseCode = "422", description = "Validation exception"),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/users/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<UserResponse> updateUser(
        @Parameter(name = "id", description = "The id that needs to be fetched. Use user1 for testing", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "UserRequest", description = "Update an existent user in the store", required = true) @Valid @RequestBody UserRequest userRequest
    );

}
