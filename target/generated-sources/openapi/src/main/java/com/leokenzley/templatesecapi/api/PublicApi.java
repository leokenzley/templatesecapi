/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.leokenzley.templatesecapi.api;

import com.leokenzley.templatesecapi.model.Error;
import com.leokenzley.templatesecapi.model.UserResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-04-03T22:39:55.594698911-03:00[America/Sao_Paulo]")
@Validated
@Tag(name = "public/users", description = "Public Users controll APIs")
@RequestMapping("${openapi.controleDeUsurios.base-path:}")
public interface PublicApi {

    /**
     * GET /public/users : Get all public users.
     * Get all public users.
     *
     * @return successful operation (status code 200)
     */
    @Operation(
        operationId = "getAllPublicUsers",
        summary = "Get all public users.",
        description = "Get all public users.",
        tags = { "public/users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UserResponse.class))),
                @Content(mediaType = "application/xml", array = @ArraySchema(schema = @Schema(implementation = UserResponse.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/public/users",
        produces = { "application/json", "application/xml" }
    )
    ResponseEntity<List<UserResponse>> getAllPublicUsers(
        
    );


    /**
     * GET /public/users/{id} : Get public user by user id.
     * Get public user detail based on id.
     *
     * @param id The id that needs to be fetched. Use user1 for testing (required)
     * @return successful operation (status code 200)
     *         or Invalid username supplied (status code 400)
     *         or User not found (status code 404)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getPublicUserById",
        summary = "Get public user by user id.",
        description = "Get public user detail based on id.",
        tags = { "public/users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponse.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = UserResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid username supplied"),
            @ApiResponse(responseCode = "404", description = "User not found"),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/public/users/{id}",
        produces = { "application/json", "application/xml" }
    )
    ResponseEntity<UserResponse> getPublicUserById(
        @Parameter(name = "id", description = "The id that needs to be fetched. Use user1 for testing", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    );

}
