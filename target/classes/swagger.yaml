openapi: 3.0.4
info:
  title: Controle de Usuários - API
  description: API báse para criar um bom architype
  termsOfService: https://github.com/leokenzley
  contact:
    email: leokenzley@gmail.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.12
externalDocs:
  description: Find out more about Swagger
  url: https://swagger.io
servers:
  - url: http://localhost:8080
tags:
  - name: users
    description: Users controll APIs
  - name: public/users  
    description: Public Users controll APIs
paths:
  /public/users:
    get:
      tags:
        - public/users
      summary: Get all public users.
      description: Get all public users.
      operationId: getAllPublicUsers
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
  /public/users/{id}:
    parameters: # Defina o parâmetro no nível do caminho
      - name: id
        in: path
        description: The id that needs to be fetched. Use user1 for testing
        required: true
        schema:
          type: integer
          format: int32
    get:
      tags:
        - public/users
      summary: Get public user by user id.
      description: Get public user detail based on id.
      operationId: getPublicUserById
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"                
  /users/{id}:
    parameters: # Defina o parâmetro no nível do caminho
      - name: id
        in: path
        description: The id that needs to be fetched. Use user1 for testing
        required: true
        schema:
          type: integer
          format: int32
    get:
      tags:
        - users
      summary: Get user by user id.
      description: Get user detail based on id.
      operationId: getUserById
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - users
      summary: Deletes an user.
      description: Delete an user.
      operationId: deleteUserById
      responses:
        '200':
          description: User deleted
        '400':
          description: Invalid user value
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - users
      summary: Update an existing user.
      description: Update an existing user by Id.
      operationId: updateUser
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users:
    get:
      tags:
        - users
      summary: Get all users.
      description: Get all users.
      operationId: getAllUsers
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
    post:
      tags:
        - users
      summary: Add a new user.
      description: Add a new user.
      operationId: addUser
      requestBody:
        description: Create a new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserResponse'
                
components:
  schemas:
    UserResponse:
      type: object
      properties:      
        id:
          type: integer
          format: int32
          example: 10
        name:
          type: string
          example: theUser
        email:
          type: string
          example: leo@demo.br
        cpf:
          type: string
          example: 0000000000             
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message      
    UserRequest:            
      type: object
      properties:      
        id:
          type: integer
          format: int32
          example: 10
        name:
          type: string
          example: theUser
        email:
          type: string
          example: leo@demo.br
        cpf:
          type: string
          example: 0000000000
  securitySchemes:
    oauth2:
      type: oauth2
      description: "Autenticação OAuth2 via Keycloak"
      flows:
        clientCredentials:  # Para comunicação entre serviços
          tokenUrl: "http://localhost:8080/realms/master/protocol/openid-connect/token"
          scopes:
            read: "Permissão de leitura"
            write: "Permissão de escrita"

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 